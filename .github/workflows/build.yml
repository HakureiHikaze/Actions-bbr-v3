name: 构建带有BBRv3的内核（多发行版支持）

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: 删除旧的工作流运行记录
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0      # 保留 0 天的记录
          keep_minimum_runs: 1 # 至少保留 1 次记录以供参考

  build:
    needs: cleanup
    strategy:
      fail-fast: false
      matrix:
        # 定义需要构建的组合
        # 您可以按需添加或删除这里的条目
        include:
          # 为 Debian/Ubuntu 构建 .deb 包
          - arch: x86_64
            distro: debian
            runs_on: ubuntu-latest
          - arch: arm64
            distro: debian
            runs_on: ubuntu-24.04-arm
          
          # 为 Fedora/CentOS/RHEL 构建 .rpm 包
          - arch: x86_64
            distro: rpm
            runs_on: ubuntu-latest

    runs-on: ${{ matrix.runs_on }}
    env:
      ARCH: ${{ matrix.arch }}
      DISTRO: ${{ matrix.distro }}
      KERNEL_VERSION: ""
      
    steps:
      - name: 获取内核版本
        id: get_kernel_version
        run: |
          version=$(curl -s https://www.kernel.org \
            | grep -A1 -m1 "stable:" \
            | grep -oP '\d+\.\d+\.\d+')
          echo "获取到最新的稳定版内核版本: $version"
          echo "KERNEL_VERSION=$version" >> $GITHUB_ENV

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装依赖项
        run: |
          sudo apt-get update
          # 安装通用依赖
          sudo apt-get install -y \
            git build-essential libncurses-dev libssl-dev libelf-dev \
            bison bc flex rsync fakeroot kmod cpio dwarves \
            lz4 zstd xz-utils curl jq
          
          # 根据发行版类型安装特定的打包工具
          if [ "${{ env.DISTRO }}" = "debian" ]; then
            sudo apt-get install -y dpkg-dev
          elif [ "${{ env.DISTRO }}" = "rpm" ]; then
            # 【已修复】在 Ubuntu 上，RPM 构建工具位于 'rpm' 包中
            sudo apt-get install -y rpm
          fi

      - name: 创建源码目录
        run: mkdir -p ./kernel/linux

      - name: 下载内核源代码
        working-directory: ./kernel
        run: |
          branch=$(echo "${{ env.KERNEL_VERSION }}" | grep -oP '^\d+\.\d+')
          echo "正在下载 linux-$branch.y 分支..."
          git clone --depth=1 --branch linux-$branch.y \
            https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git linux

      - name: 合并 Google BBRv3
        working-directory: ./kernel/linux
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote add google-bbr https://github.com/google/bbr.git
          git fetch google-bbr
          git merge google-bbr/v3 --allow-unrelated-histories -m "Merge BBRv3 changes" || exit 1
          echo "BBRv3 合并成功。"

      - name: 更新 Makefile 中的版本号
        working-directory: ./kernel/linux
        run: |
          echo "正在强制更新 Makefile 中的版本号为 ${{ env.KERNEL_VERSION }}"
          IFS='.' read -r v p s <<< "${{ env.KERNEL_VERSION }}"
          sed -i "s/^VERSION *=.*/VERSION = $v/" Makefile
          sed -i "s/^PATCHLEVEL *=.*/PATCHLEVEL = $p/" Makefile
          sed -i "s/^SUBLEVEL *=.*/SUBLEVEL = $s/" Makefile

      - name: 准备 .config
        working-directory: ./kernel/linux
        run: |
          if [ "${{ env.ARCH }}" = "arm64" ]; then
            curl -sSL https://raw.githubusercontent.com/byJoey/Actions-bbr-v3/main/arm64.config > .config
            make ARCH=arm64 olddefconfig
          else
            curl -sSL https://raw.githubusercontent.com/byJoey/Actions-bbr-v3/main/x86-64.config > .config
            make olddefconfig
          fi

      - name: 构建内核软件包
        working-directory: ./kernel/linux
        run: |
          CMD_PREFIX=""
          if [ "${{ env.ARCH }}" = "arm64" ]; then
            CMD_PREFIX="ARCH=arm64"
          fi

          if [ "${{ env.DISTRO }}" = "debian" ]; then
            echo "正在构建 Debian (.deb) 软件包..."
            $CMD_PREFIX make bindeb-pkg -j$(nproc) LOCALVERSION=-joeyblog-bbrv3
          elif [ "${{ env.DISTRO }}" = "rpm" ]; then
            echo "正在构建 RPM (.rpm) 软件包..."
            $CMD_PREFIX make binrpm-pkg -j$(nproc) LOCALVERSION=-joeyblog-bbrv3
          fi

      - name: 整理软件包用于发布
        run: |
          mkdir -p ./packages
          if [ "${{ env.DISTRO }}" = "debian" ]; then
            mv ./kernel/*.deb ./packages/
          elif [ "${{ env.DISTRO }}" = "rpm" ]; then
            # RPM 包默认输出到特定的用户目录
            find ~/rpmbuild/RPMS -name "*.rpm" -exec mv {} ./packages/ \;
          fi
          echo "找到以下软件包准备发布:"
          ls -l ./packages

      - name: 上传软件包作为构建产物
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ env.ARCH }}-${{ env.DISTRO }}
          path: ./packages/

      - name: 发布到 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.ARCH }}-${{ env.KERNEL_VERSION }}-${{ env.DISTRO }}
          files: ./packages/*
          body: "带有 BBRv3 的最新内核，适用于 ${{ env.ARCH }} 架构 (${{ env.DISTRO }})"
